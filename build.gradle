buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        jcenter()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forgegradle_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath "org.parchmentmc:librarian:${librarian_version}"
    }
}
plugins {
    id "idea"
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id "net.neoforged.moddev.legacyforge" version "2.0.74"
    id "dev.ithundxr.silk" version "0.11.15"
    id "io.freefair.lombok" version "8.11"

}
apply from: "./gradle/java.gradle"
apply from: "gradle/property_loader.gradle"


version = project.mod_version + "-forge-mc" + project.minecraft_version
group = project.maven_group
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"


    validateAccessTransformers = false

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
    mods {
        metallurgica {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'
            programArgument '-mixin.config=metallurgica.mixins.json'
        }
        client {
            client()
            ideName = "Client"

            programArguments.addAll('--username', project.file('username.txt').readLines()[0])

            gameDirectory = project.file('run')
            systemProperty('forge.enabledGameTestNamespaces', "metallurgica")
        }

        server {
            server()
            //sourceSet = sourceSets.main
            ideName = "Server"

            gameDirectory.set(file('run/server'))
            //programArgument '--nogui'
            //systemProperty('forge.enabledGameTestNamespaces', "metallurgica")
        }

        gameTestServer {
            type = "gameTestServer"
            sourceSet = sourceSets.test
            ideName = "Game Tests"

            gameDirectory.set(file('run/gametest'))
            systemProperty('forge.enabledGameTestNamespaces', "metallurgica")
        }

        data {
            data()
            sourceSet = sourceSets.main
            ideName = "Data Generation"

            gameDirectory.set(file('run/data'))

            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", mod_id as String, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources").getAbsolutePath())
        }
    }
}

sourceSets.main {
    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }
}

repositories {
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'

    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}")
    modRuntimeOnly(jarJar("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}") {
        version {
            strictly "[1.0,2.0)"
            prefer flywheel_version
        }
    })
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))

    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }

    modCompileOnly("maven.modrinth:emi:${emi_version}")

    modImplementation("maven.modrinth:create-tfmg:${tfmg_version}") //1.19

    modCompileOnly("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    modCompileOnly("dev.latvian.mods:rhino-forge:${rhino_version}")
    modCompileOnly("dev.architectury:architectury-forge:${architectury_version}")

    modApi("org.apfloat:apfloat:1.11.0")
    modApi("org.jgrapht:jgrapht:1.5.2")
    modApi("org.jgrapht:jgrapht-core:1.5.2")

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }
}

compileJava.options.encoding = 'UTF-8'
compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}
processResources {
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}


jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
